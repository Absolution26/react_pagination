{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","components/Pagination/Items.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","amountOfCells","Math","ceil","cells","className","cn","disabled","href","onClick","map","cell","active","Items","items","item","App","useState","perPageNum","setPerPageNum","setCurrentPage","firstItem","lastItem","min","id","onChange","event","target","value","selected","htmlFor","page","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCGIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MAII,IAHJC,eAGI,MAHM,EAGN,EAFJC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAgBC,KAAKC,KAAKN,EAAQC,GAClCM,EAAQd,EAAW,EAAGW,GAE5B,OACE,qBAAII,UAAU,aAAd,UACE,oBAAIA,UACFC,IAAG,YAAa,CAAEC,SAA0B,IAAhBR,IAD9B,SAIE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBT,EACfU,QAAS,WACa,IAAhBV,GAIJC,EAAaD,EAAc,IAV/B,oBAiBDK,EAAMM,KAAI,SAAAC,GAAI,OACb,oBACEN,UAAWC,IAAG,YAAa,CAAEM,OAAQb,IAAgBY,IADvD,SAIE,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAYT,EAAaW,IAJpC,SAMGA,KAREA,MAaT,oBAAIN,UACFC,IAAG,YAAa,CAAEC,SAAUR,IAAgBE,IAD9C,SAIE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAAeT,IAAgBE,EAC/BQ,QAAS,WACHV,GAAeE,GAInBD,EAAaD,EAAc,IAV/B,wBC9DKc,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACnB,6BACGA,EAAMJ,KAAI,SAAAK,GAAI,OACb,oBAAI,UAAQ,OAAZ,wBAAuCA,IAAfA,SCOjBC,EAAgB,WAC3B,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOlB,EAAP,KAAoBqB,EAApB,KAGMC,GAAatB,EAAc,GAAKmB,EAAa,EAC7CI,EAAWpB,KAAKqB,IAAIxB,EAAcmB,EAF1B,IAGRJ,EAAQxB,EAAW+B,EAAWC,GAEpC,OACE,sBAAKjB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWN,EADX,mBACiCsB,EADjC,cACgDC,EADhD,eATU,GASV,OAIA,sBAAKjB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRmB,GAAG,kBACHnB,UAAU,eACVoB,SAAU,SAAAC,GACRP,GAAeO,EAAMC,OAAOC,OAC5BR,EAAe,IANnB,UASE,wBACEQ,MAAM,IADR,eAKA,wBACEA,MAAM,IACNC,UAAQ,EAFV,eAMA,wBACED,MAAM,KADR,gBAKA,wBACEA,MAAM,KADR,qBAQJ,uBAAOE,QAAQ,kBAAkBzB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACER,MAtDQ,GAuDRC,QAASoB,EACTnB,YAAaA,EACbC,aAAc,SAAA+B,GAAI,OAAIX,EAAeW,MAGvC,cAAC,EAAD,CAAOjB,MAAOA,QCvEpBkB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.495837bb.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ninterface Props {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n}\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage = 1,\n  currentPage,\n  onPageChange,\n}) => {\n  const amountOfCells = Math.ceil(total / perPage);\n  const cells = getNumbers(1, amountOfCells);\n\n  return (\n    <ul className=\"pagination\">\n      <li className={\n        cn('page-item', { disabled: currentPage === 1 })\n      }\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1}\n          onClick={() => {\n            if (currentPage === 1) {\n              return;\n            }\n\n            onPageChange(currentPage - 1);\n          }}\n        >\n          «\n        </a>\n      </li>\n\n      {cells.map(cell => (\n        <li\n          className={cn('page-item', { active: currentPage === cell })}\n          key={cell}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${cell}`}\n            onClick={(): void => onPageChange(cell)}\n          >\n            {cell}\n          </a>\n        </li>\n      ))}\n\n      <li className={\n        cn('page-item', { disabled: currentPage === amountOfCells })\n      }\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === amountOfCells}\n          onClick={() => {\n            if (currentPage >= amountOfCells) {\n              return;\n            }\n\n            onPageChange(currentPage + 1);\n          }}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","export const Items = ({ items }: { items: number[] }) => (\n  <ul>\n    {items.map(item => (\n      <li data-cy=\"item\" key={item}>{`Item ${item}`}</li>\n    ))}\n  </ul>\n);\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\nimport { Items } from './components/Pagination/Items';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n// const items = getNumbers(1, 42)\n//   .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPageNum, setPerPageNum] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const total = 42;\n  const firstItem = (currentPage - 1) * perPageNum + 1;\n  const lastItem = Math.min(currentPage * perPageNum, total);\n  const items = getNumbers(firstItem, lastItem);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItem} - ${lastItem} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={event => {\n              setPerPageNum(+event.target.value);\n              setCurrentPage(1);\n            }}\n          >\n            <option\n              value=\"3\"\n            >\n              3\n            </option>\n            <option\n              value=\"5\"\n              selected\n            >\n              5\n            </option>\n            <option\n              value=\"10\"\n            >\n              10\n            </option>\n            <option\n              value=\"20\"\n            >\n              20\n            </option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={perPageNum}\n        currentPage={currentPage}\n        onPageChange={page => setCurrentPage(page)}\n      />\n\n      <Items items={items} />\n      {/* <ul>\n        {items.map(item => (\n          <li data-cy=\"item\" key={item}>{`Item ${item}`}</li>\n        ))}\n      </ul> */}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}